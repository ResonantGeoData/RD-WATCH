# Generated by Django 4.1.9 on 2023-08-22 08:14

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0011_siteimage_aws_location_siteimage_image_bbox_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='hyperparameters',
            name='ground_truth',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='hyperparameters',
            name='proposal',
            field=models.CharField(
                blank=True,
                choices=[('PROPOSAL', 'Proposal'), ('APPROVED', 'Approved')],
                help_text='Fetching Status',
                max_length=255,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='cache_commit_hash',
            field=models.CharField(
                blank=True,
                help_text='Hash of the file for proposals',
                max_length=2048,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='cache_originator_file',
            field=models.CharField(
                blank=True,
                help_text='Name of source file for proposals',
                max_length=2048,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='cache_timestamp',
            field=models.DateTimeField(
                help_text='Cache timestamp for proposals', null=True
            ),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='end_date',
            field=models.DateTimeField(help_text='end date in geoJSON', null=True),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='start_date',
            field=models.DateTimeField(help_text='Start date in geoJSON', null=True),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='status',
            field=models.CharField(
                blank=True,
                choices=[
                    ('PROPOSAL', 'Proposal'),
                    ('APPROVED', 'Approved'),
                    ('REJECTED', 'Rejected'),
                ],
                help_text='Fetching Status',
                max_length=255,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='siteevaluation',
            name='validated',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='siteobservation',
            name='notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='siteevaluation',
            name='number',
            field=models.IntegerField(db_index=True, help_text='The site number'),
        ),
        migrations.AlterField(
            model_name='siteobservation',
            name='timestamp',
            field=models.DateTimeField(
                help_text="The source image's timestamp", null=True
            ),
        ),
        migrations.CreateModel(
            name='SiteObservationTracking',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('edited', models.DateTimeField()),
                ('score', models.FloatField(help_text='Evaluation accuracy')),
                (
                    'geom',
                    django.contrib.gis.db.models.fields.PolygonField(
                        help_text='Footprint of site observation', srid=3857
                    ),
                ),
                ('notes', models.TextField(blank=True, null=True)),
                (
                    'label',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to='core.observationlabel',
                    ),
                ),
                (
                    'observation',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='base_site_observation',
                        to='core.siteobservation',
                    ),
                ),
                (
                    'siteeval',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='core.siteevaluation',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='SiteEvaluationTracking',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('edited', models.DateTimeField()),
                (
                    'start_date',
                    models.DateTimeField(help_text='Start date in geoJSON', null=True),
                ),
                (
                    'end_date',
                    models.DateTimeField(help_text='end date in geoJSON', null=True),
                ),
                ('score', models.FloatField(help_text='Score of site footprint')),
                ('notes', models.TextField(blank=True, null=True)),
                (
                    'evaluation',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='core.siteevaluation',
                    ),
                ),
                (
                    'label',
                    models.ForeignKey(
                        help_text='Site feature classification label',
                        on_delete=django.db.models.deletion.PROTECT,
                        to='core.observationlabel',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationExport',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('export_file', models.FileField(blank=True, null=True, upload_to='')),
                (
                    'created',
                    models.DateTimeField(
                        help_text='The zip file export, deleted 1 hour after creation'
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        blank=True,
                        help_text='Name of the model run for download',
                        max_length=1024,
                    ),
                ),
                (
                    'celery_id',
                    models.CharField(
                        blank=True, help_text='Celery Task Id', max_length=255
                    ),
                ),
                (
                    'configuration',
                    models.ForeignKey(
                        help_text='The hyper parameters used for the xport',
                        on_delete=django.db.models.deletion.PROTECT,
                        to='core.hyperparameters',
                    ),
                ),
            ],
        ),
    ]
