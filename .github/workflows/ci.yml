name: ci
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install tox
        run: |
          pip install --upgrade pip
          pip install tox
      - name: Run linting
        run: tox -e lint
  production:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install Python Client
        run: |
          pip install --upgrade pip
          cd rgd-watch-client
          pip install -e .
          cd ..
      - name: Run linting
        run: |
          python -c "from rgd_client import create_rgd_client;client = create_rgd_client(api_url='https://watch.resonantgeodata.com/api');client.rgd.search()"
        env:
          RGD_API_TOKEN: ${{ secrets.RGD_API_TOKEN }}
  check-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_DB: django
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
      minio:
        # This image does not require any command arguments (which GitHub Actions don't support)
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: minioAccessKey
          MINIO_SECRET_KEY: minioSecretKey
        ports:
          - 9000:9000
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install tox
        run: |
          pip install --upgrade pip
          pip install tox
      - name: Run check migration
        run: |
          tox -e check-migrations
        env:
          DJANGO_DATABASE_URL: postgres://postgres:postgres@localhost:5432/django
          DJANGO_MINIO_STORAGE_ENDPOINT: localhost:9000
          DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
          DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:latest
        env:
          POSTGRES_DB: django
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
      minio:
        # This image does not require any command arguments (which GitHub Actions don't support)
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: minioAccessKey
          MINIO_SECRET_KEY: minioSecretKey
        ports:
          - 9000:9000
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install tox
        run: |
          pip install --upgrade pip
          pip install tox
      - name: Run tests
        run: |
          tox -e test
        env:
          DJANGO_DATABASE_URL: postgres://postgres:postgres@localhost:5432/django
          DJANGO_MINIO_STORAGE_ENDPOINT: localhost:9000
          DJANGO_MINIO_STORAGE_ACCESS_KEY: minioAccessKey
          DJANGO_MINIO_STORAGE_SECRET_KEY: minioSecretKey
          AWS_ACCESS_KEY_ID: ${{ secrets.WATCH_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.WATCH_AWS_SECRET_ACCESS_KEY }}
          SMART_STAC_API_KEY: ${{ secrets.SMART_STAC_API_KEY }}
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          verbose: true
