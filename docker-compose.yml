version: '3'
services:
  postgres:
    image: postgis/postgis:latest
    environment:
      POSTGRES_DB: django
      POSTGRES_PASSWORD: postgres
    ports:
      - ${DOCKER_POSTGRES_PORT-5432}:5432
    volumes:
      - dbdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:management
    ports:
      - ${DOCKER_RABBITMQ_PORT-5672}:5672

  minio:
    image: minio/minio:latest
    # When run with a TTY, minio prints credentials on startup
    tty: true
    command: ["server", "/data"]
    environment:
      MINIO_ACCESS_KEY: minioAccessKey
      MINIO_SECRET_KEY: minioSecretKey
    ports:
      - ${DOCKER_MINIO_PORT-9000}:9000
    volumes:
      - fsdata:/data

  django:
    build:
      context: .
      dockerfile: ./dev/django.Dockerfile
    command: ["./manage.py", "runserver", "0.0.0.0:8000"]
    # Log printing via Rich is enhanced by a TTY
    tty: true
    env_file: ./dev/.env.docker-compose
    volumes:
      - .:/opt/django-project
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - rabbitmq
      - minio

  celery:
    build:
      context: .
      dockerfile: ./dev/celery.Dockerfile
    command: [
      "celery",
      "--app", "watch.celery",
      "worker",
      "--loglevel", "INFO",
      "--without-heartbeat"
    ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    privileged: true
    env_file: ./dev/.env.docker-compose
    volumes:
      - .:/opt/django-project
    depends_on:
      - postgres
      - rabbitmq
      - minio

  flower:
    image: mher/flower
    command: ["--broker=amqp://rabbitmq:5672/", "--url_prefix=flower"]
    ports:
      - 5555:5555


volumes:
  dbdata:
  fsdata:
